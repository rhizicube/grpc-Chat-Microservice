// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiveClient is the client API for ChatServive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiveClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServive_ChatClient, error)
}

type chatServiveClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiveClient(cc grpc.ClientConnInterface) ChatServiveClient {
	return &chatServiveClient{cc}
}

func (c *chatServiveClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatServive_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatServive_ServiceDesc.Streams[0], "/chat.ChatServive/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiveChatClient{stream}
	return x, nil
}

type ChatServive_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatServiveChatClient struct {
	grpc.ClientStream
}

func (x *chatServiveChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiveChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiveServer is the server API for ChatServive service.
// All implementations must embed UnimplementedChatServiveServer
// for forward compatibility
type ChatServiveServer interface {
	Chat(ChatServive_ChatServer) error
	mustEmbedUnimplementedChatServiveServer()
}

// UnimplementedChatServiveServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiveServer struct {
}

func (UnimplementedChatServiveServer) Chat(ChatServive_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatServiveServer) mustEmbedUnimplementedChatServiveServer() {}

// UnsafeChatServiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiveServer will
// result in compilation errors.
type UnsafeChatServiveServer interface {
	mustEmbedUnimplementedChatServiveServer()
}

func RegisterChatServiveServer(s grpc.ServiceRegistrar, srv ChatServiveServer) {
	s.RegisterService(&ChatServive_ServiceDesc, srv)
}

func _ChatServive_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiveServer).Chat(&chatServiveChatServer{stream})
}

type ChatServive_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatServiveChatServer struct {
	grpc.ServerStream
}

func (x *chatServiveChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiveChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServive_ServiceDesc is the grpc.ServiceDesc for ChatServive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatServive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatServive",
	HandlerType: (*ChatServiveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatServive_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
